version: "3.9"

# Configure modules
x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: docker/airflow/dockerfile
  # image: apache/airflow:2.7.0-python3.10
  environment:
    &airflow-common-env
    S3_ENDPOINT: http://minio:9000
    S3_ACCESS_KEY: minio
    S3_SECRET_KEY: minio123
    S3_PATH_STYLE_ACCESS: "true"
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__CORE__TEST_CONNECTION: 'enabled'
    AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS: 'false'
    AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: Europe/Malta
    AIRFLOW__CORE__DEFAULT_TIMEZONE: Europe/Malta
    AIRFLOW_UID: '50000'
    _AIRFLOW_WWW_USER_USERNAME: airflow
    _AIRFLOW_WWW_USER_PASSWORD: airflow
    # Using dockerfile instead of _PIP_ADDITIONAL_REQUIREMENTS;
    # WARNING: This is a development/test feature only. NEVER use it in production!
    # the container starts, so it is only useful for testing and trying out of adding dependencies.
    # _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- dbt-core dbt-trino trino airflow-dbt}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./dbts:/opt/airflow/dbts
    - ./docker/airflow/config:/opt/airflow/config
    - ./docker/airflow/plugins:/opt/airflow/plugins
    - ./docker/volume/airflow/logs:/opt/airflow/logs
    - ./datasources:/opt/airflow/sources  # Mount datasources directory to airflow containers
    - ./notebook:/opt/airflow/notebook # Mount notebook directory to airflow containers
    - ./docker/spark/spark-defaults-iceberg.conf:/opt/airflow/spark/conf/spark-defaults.conf # Default configs for spark
  user: "50000"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

# Configure services
services:

  ####################################################################################################
  # Storages
  ####################################################################################################
  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:11
    profiles: [ "storage", "spark", "airflow"]
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./docker/volume/postgres:/var/lib/postgresql/data
      - ./docker/postgres/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      retries: 5
      start_period: 5s
  minio:
    container_name: minio
    hostname: minio
    image: 'minio/minio'
    profiles: [ "storage","spark", "nifi" ]    
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
      MINIO_DOMAIN: minio
    command: server /data --console-address ":9001"
    volumes:
      - ./docker/volume/minio:/data
  minio-job:
    image: 'minio/mc'
    profiles: [ "storage" , "nifi"]    
    container_name: minio-job
    hostname: minio-job
    entrypoint: |
      /bin/bash -c "
      sleep 5;
      /usr/bin/mc config --quiet host add myminio http://minio:9000 minio minio123 || true;
      /usr/bin/mc mb --quiet myminio/prd-lakehouse || true;
      /usr/bin/mc mb --quiet myminio/dev-lakehouse || true;
      /usr/bin/mc mb --quiet myminio/prd-landing-zone || true;
      /usr/bin/mc mb --quiet myminio/dev-landing-zone || true;
      "
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=us-east-1
      - AWS_DEFAULT_REGION=us-east-1
      - S3_ENDPOINT=http://minio:9000
      - S3_PATH_STYLE_ACCESS=true
    depends_on:
      - minio

  hive-metastore:
    container_name: hive-metastore
    hostname: hive-metastore
    build:
      context: ./docker/hive-metastore/
      dockerfile: Dockerfile
    image: 1ambda/lakehouse:hive-metastore-3.1.2
    profiles: [ "storage" ,"spark"]    
    ports:
      - '9083:9083' # Metastore Thrift
    environment:
      HIVE_METASTORE_DRIVER: org.postgresql.Driver
      HIVE_METASTORE_JDBC_URL: jdbc:postgresql://postgres:5432/metastore
      HIVE_METASTORE_USER: hive
      HIVE_METASTORE_PASSWORD: hive
      HIVE_METASTORE_WAREHOUSE_DIR: s3://prd-lakehouse/iceberg
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minio
      S3_SECRET_KEY: minio123
      S3_PATH_STYLE_ACCESS: "true"
    depends_on:
      postgres:
        condition: service_healthy

  ####################################################################################################
  # Trino
  ####################################################################################################
  trino:
    profiles: [ "trino", "storage" ]
    container_name: trino
    hostname: trino
    image: "trinodb/trino:425"
    restart: always
    ports:
      - "8889:8889"
    volumes:
      - ./docker/trino/etc-coordinator:/etc/trino
      - ./docker/trino/catalog:/etc/trino/catalog
    depends_on:
      - hive-metastore
  trino-worker:
    profiles: [ "trino-worker", "storage" ]
    container_name: trino-worker
    hostname: trino-worker
    image: "trinodb/trino:425"
    restart: always
    volumes:
      - ./docker/trino/etc-worker:/etc/trino
      - ./docker/trino/catalog:/etc/trino/catalog
    depends_on:
      - trino

  ####################################################################################################
  # Spark
  ####################################################################################################
  spark-iceberg:
    profiles: [ "spark" ]
    # build:
    #   context: ./docker/spark/
    #   dockerfile: Dockerfile-spark3.4
    image: weslleybarboza/spark-3.4:latest
    container_name: spark-iceberg
    hostname: spark-iceberg
    entrypoint: |
      /bin/bash -c "
      jupyter lab --notebook-dir=/opt/notebook --ip='*' --NotebookApp.token='' --NotebookApp.password='' --port=8888 --no-browser --allow-root
      "
    ports:
      - "4040:4040"
      - "8900:8888"
      - "8901:8080"
    depends_on:
      - minio
      - hive-metastore
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=us-east-1
      - AWS_DEFAULT_REGION=us-east-1
      - S3_ENDPOINT=http://minio:9000
      - S3_PATH_STYLE_ACCESS=true
    mem_limit: "8g"
    mem_reservation: "512m"
    cpus: "4"
    cpuset: "4"
    volumes:
      - ./notebook:/opt/notebook
      - ./docker/jupyter/jupyter_server_config.py:/root/.jupyter/jupyter_server_config.py
      - ./docker/jupyter/themes.jupyterlab-settings:/root/.jupyter/lab/user-settings/@jupyterlab/apputils-extension/themes.jupyterlab-settings
      - ./docker/spark/spark-defaults-iceberg.conf:/opt/spark/conf/spark-defaults.conf

  ####################################################################################################
  # Airflow
  ####################################################################################################
  airflow-webserver:
    <<: *airflow-common
    profiles: [ "airflow" ]
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-scheduler:
    <<: *airflow-common
    profiles: [ "airflow" ]
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8974/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-worker:
    <<: *airflow-common
    profiles: [ "airflow" ]
    hostname: airflow-worker
    container_name: airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-cli:
    <<: *airflow-common
    container_name: airflow-cli
    profiles: [ "airflow-debug" ]
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
  airflow-init:
    <<: *airflow-common
    profiles: [ "airflow" ]
    container_name: airflow-init
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "50000:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version 
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
  redis:
    profiles: [ "airflow" ]
    container_name: redis
    hostname: redis
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  ####################################################################################################
  # Nifi
  ####################################################################################################
  nifi:
    profiles: [ "nifi" ]
    image: apache/nifi:latest
    container_name: nifi
    hostname: nifi
    ports:
      - '8443:8443'
    volumes:
      - ./docker/nifi/jdbc:/opt/jdbc
      - nifi_data:/opt/nifi/data
    #  - ./docker/nifi/certs:/opt/certs
    #  - ./docker/nifi/logs:/opt/nifi/logs
      - ./docker/nifi/properties:/opt/nifi/nifi-current/properties  #credentials.properties
      - nifi_database_repository:/opt/nifi/nifi-current/database_repository
      - nifi_flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - nifi_content_repository:/opt/nifi/nifi-current/content_repository
      - nifi_provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - ./datasources:/opt/nifi/sources
    environment:
      NIFI_WEB_HTTP_PORT: 8443
      SINGLE_USER_CREDENTIALS_USERNAME: nifi
      SINGLE_USER_CREDENTIALS_PASSWORD: nifi123
  nifi-registry:
    profiles: [ "nifi-registry" ]
    image: apache/nifi-registry:latest
    container_name: nifi-registry
    ports:
      - '1808:18080'
    volumes:
     - ./docker/volume/nifi-registry/data:/data
     - ./docker/volume/nifi-registry/database:/opt/nifi-registry/nifi-registry-current/database
     - ./docker/volume/nifi-registry//flow_storage:/opt/nifi-registry/nifi-registry-current/flow_storage
     - ./docker/volume/nifi-registry/nifi-registry:/opt/nifi-registry/nifi-registry-current/nifi-registry
     - ./docker/volume/nifi-registry/certs:/opt/certs
    environment:
      NIFI_REGISTRY_WEB_HTTP_PORT: 18080
      # NIFI_REGISTRY_FLOW_PROVIDER: git
      # NIFI_REGISTRY_GIT_REMOTE_URL: https://github.com/weslleybarboza/nifi_registry.git
      # NIFI_REGISTRY_GIT_USER: weslleybarboza
      # NIFI_REGISTRY_GIT_PASSWORD: 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
      # NIFI_REGISTRY_GIT_REPO: /opt/nifi-registry/nifi-registry-current/nifi-registry

volumes:
  nifi_jdbc:
  nifi_data:
  nifi_database_repository:
  nifi_flowfile_repository:
  nifi_content_repository:
  nifi_provenance_repository:

# Configure Network
networks:
  default:
    name: lakehouse
